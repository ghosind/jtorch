const jtorch = require('bindings')('jtorch');

interface Tensor {
  get T(): Tensor;

  abs(): Tensor;
  acos(): Tensor;
  arccos(): Tensor;
  adjoint(): Tensor;
  angle(): Tensor;
  asin(): Tensor;
  arcsin(): Tensor;
  atan(): Tensor;
  arctan(): Tensor;
  ceil(): Tensor;
  clone(): Tensor;
  conj(): Tensor;
  conj_physical(): Tensor;
  resolve_conj(): Tensor;
  resolve_neg(): Tensor;
  cos(): Tensor;
  corrcoef(): Tensor;
  cosh(): Tensor;
  acosh(): Tensor;
  arccosh(): Tensor;
  det(): Tensor;
  digamma(): Tensor;
  erf(): Tensor;
  erfc(): Tensor;
  erfinv(): Tensor;
  exp(): Tensor;
  expm1(): Tensor;
  fix(): Tensor;
  fliplr(): Tensor;
  flipud(): Tensor;
  floor(): Tensor;
  frac(): Tensor;
  i0(): Tensor;
  indices(): Tensor;
  int_repr(): Tensor;
  inverse(): Tensor;
  isfinite(): Tensor;
  isinf(): Tensor;
  isposinf(): Tensor;
  isneginf(): Tensor;
  isnan(): Tensor;
  lgamma(): Tensor;
  log(): Tensor;
  logdet(): Tensor;
  log10(): Tensor;
  log1p(): Tensor;
  log2(): Tensor;
  logit(): Tensor;
  neg(): Tensor;
  negative(): Tensor;
  pin_memory(): Tensor;
  pinverse(): Tensor;
  positive(): Tensor;
  rad2deg(): Tensor;
  ravel(): Tensor;
  reciprocal(): Tensor;
  rsqrt(): Tensor;
  sigmoid(): Tensor;
  sign(): Tensor;
  signbit(): Tensor;
  sgn(): Tensor;
  sin(): Tensor;
  sinc(): Tensor;
  sinh(): Tensor;
  asinh(): Tensor;
  arcsinh(): Tensor;
  sqrt(): Tensor;
  square(): Tensor;
  t(): Tensor;
  tan(): Tensor;
  tanh(): Tensor;
  arctanh(): Tensor;
  toString(): string;
  trace(): Tensor;
  trunc(): Tensor;
  values(): Tensor;
}

export const Tensor: {
  new(): Tensor,
} = jtorch.Tensor;
